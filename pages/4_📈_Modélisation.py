import streamlit as st
import numpy as np
import pandas as pd
import pickle
import plotly.graph_objects as go
from sklearn.metrics import mean_squared_error
from prophet.plot import plot_plotly

def charger_modele(nom_fichier):
    # Charger le mod√®le √† partir du fichier Pickle
    with open(nom_fichier, "rb") as fichier_modele:
        modele = pickle.load(fichier_modele)
    return modele

def transform_df_hem (df):
  month_map = {"Jan": 1, "Feb":2,"Mar":3,"Apr":4,"May":5,"Jun":6,"Jul":7,"Aug":8,"Sep":9, "Oct":10,"Nov":11,"Dec":12}
  df = df.drop(["J-D","D-N","DJF","MAM","JJA", "SON"], axis = 1)
  df = pd.melt(df, id_vars = ["Year"], var_name = "Month", value_name="Temp")
  df['Month'] = df['Month'].map(month_map)
  df['date'] = pd.to_datetime(df[['Year', 'Month']].assign(day=1))
  df = df.drop(["Year","Month"], axis = 1)
  df = df.set_index("date")
  df = df.sort_values(by='date')
  return df

#Import des mod√®les - VsCode
#arima_glob = "arima_glob.pkl"
#arima_glob_opti = "arima_glob_opti.pkl"
#sarima_glob = "sarima_glob.pkl"
#sarima_glob_opti = "sarima_glob_opti.pkl"
#prophet_glob = "prophet_glob.pkl"
#prophet_glob_opti = "prophet_glob_opti.pkl"
#arima_nh_opti = "arima_nh_opti.pkl"
#arima_sh_opti = "arima_sh_opti.pkl"
#sarima_nh_opti = "sarima_nh_opti.pkl"
#sarima_sh_opti = "sarima_sh_opti.pkl"
#prophet_nh_opti = "prophet_nh_opti.pkl"
#prophet_sh_opti = "prophet_sh_opti.pkl"

#Import des mod√®les - Colab
arima_glob = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/arima_glob.pkl"
arima_glob_opti = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/arima_glob_opti.pkl"
sarima_glob = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/sarima_glob.pkl"
sarima_glob_opti = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/sarima_glob_opti.pkl"
prophet_glob = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/prophet_glob.pkl"
prophet_glob_opti = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/prophet_glob_opti.pkl"
arima_nh_opti = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/arima_nh_opti.pkl"
arima_sh_opti = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/arima_sh_opti.pkl"
sarima_nh_opti = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/sarima_nh_opti.pkl"
sarima_sh_opti = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/sarima_sh_opti.pkl"
prophet_nh_opti = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/prophet_nh_opti.pkl"
prophet_sh_opti = "/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/prophet_sh_opti.pkl"

st.set_page_config(
    page_title="Mod√©lisation",
    page_icon="üìà",
    layout = "wide",
    initial_sidebar_state = "expanded"
)

ZonAnn = st.session_state.df_ZonAnn
ZonAnn = ZonAnn[["Year", "Glob"]]
ZonAnn['Year'] = pd.to_datetime(ZonAnn['Year'], format='%Y')
ZonAnn = ZonAnn.rename(columns={"Year":"Date","Glob":"Temp"})
ZonAnn=ZonAnn.set_index("Date")
st.session_state.df_ZonAnnRetraite = ZonAnn
st.session_state.df_GLBRetraite = transform_df_hem(st.session_state.df_GLB)

radio = st.sidebar.radio("**Mod√©lisation - Sommaire**", ("Introduction","Pr√©dictions des temp√©ratures globales","Pr√©diction des temp√©ratures par h√©misph√®re","Conclusion"))

if radio == "Introduction":

    st.markdown("# Mod√©lisation")
    st.markdown("## Introduction : objectifs, m√©thodologie")

    txt = '''Notre objectif dans cette √©tape de mod√©lisation √©tait de r√©ussir √† **pr√©dire l'√©volution des temp√©ratures √† l'horizon 2050**.  
    Pour ce faire, nous nous sommes bas√©s sur des mod√®les de **s√©ries temporelles** qui nous permettent de pr√©dire des valeurs futures en \
    fonction des donn√©es historiques.  
    Parmi les mod√®les de s√©ries temporelles existants, nous avons choisi pour notre analyse de nous \
    focaliser sur trois d'entre eux : Le mod√®le **ARIMA**, le mod√®le **SARIMA** et enfin, le mod√®le **PROPHET**.
    '''
    st.markdown(txt)

    txt = '''Pour mener √† bien cette √©tape de mod√©lisation nous avons appliqu√© la m√©thodologie suivante sur l'ensemble des mod√®les : 

    1. Entra√Ænement d'un premier mod√®le sur les donn√©es d'entra√Ænement
    2. Pr√©dictions sur l'ensemble de test et √©valuation du mod√®le gr√¢ce √† la RMSE
    3. Pr√©dictions √† l'horizon 2050
    4. Optimisation du mod√®le gr√¢ce √† l'outil ParameterGrid de Sklearn
    5. Entra√Ænement du mod√®le optimis√© sur l'ensemble des donn√©es et pr√©dictions √† l'horizon 2050
    '''
    st.markdown(txt)

    txt = '''Dans un premier temps, nous avons tent√© de pr√©dire les temp√©ratures √† l'√©chelle **globale**, puis nous avons compl√©t√© notre analyse par des pr√©dictions
    par **h√©misph√®res** car comme nous l'avons vu pr√©c√©demment, il peut exister des disparit√©s importantes lorsque l'on regarde les √©volutions de temp√©ratures par zones g√©ographiques.
    '''

    st.markdown(txt)

if radio == "Pr√©dictions des temp√©ratures globales":

        st.markdown("# Mod√©lisation")
        st.markdown(f"## {radio}")
        st.markdown("Par soucis de simplicit√© nous ne pr√©senterons ici que les r√©sultats des mod√®les dits 'optimis√©s', c'est √† dire apr√®s recherche des meilleures param√®tres qui permettent d'atteindre la valeur de RMSE la plus faible.")
        
        tab1, tab2, tab3 = st.tabs(["ARIMA","SARIMA","PROPHET"])

        with tab1:
            st.markdown("### Pr√©dictions √† 2050 avec le mod√®le optimis√©")

            txt = ''' Pour le mod√®le ARIMA, nous avons utilis√© le dataset contenant les donn√©es annuelles. En effet, ARIMA n'ayant pas de composante saisonni√®re
            nous ne pouvions pas prendre les donn√©es mensuelles qui risquaient d'int√©grer une saisonnalit√©.
            '''
            st.markdown(txt)

            with st.expander("Afficher les donn√©es utilis√©es pour l'analyse"):
                choix = st.radio("Afficher le dataframe 'Donn√©es annuelles' brut ou retrait√© ?", ["Brut","Retrait√©"], horizontal= True, label_visibility= "collapsed")
                if choix == "Brut":
                    st.dataframe(st.session_state.df_ZonAnn)
                elif choix == "Retrait√©":
                    st.dataframe(st.session_state.df_ZonAnnRetraite)

            st.markdown('#### Entra√Ænement et pr√©dictions sur un mod√®le optimis√©')
            
            df = st.session_state.df_ZonAnnRetraite

            arima_opti = charger_modele(arima_glob_opti)
            pred = arima_opti.predict(0,170)

            st.metric("RMSE",0.1478) 
            #Pas possible de la recalculer car le mod√®le est entra√Æner sur tout l'ensemble
            #On r√©cup√®re donc la RMSE issue de la ParamterGrid

            fig = go.Figure()

            fig.add_trace(go.Scatter(x = pred.index, y = df.Temp, mode = "lines+markers", name = "Actual", line=dict(color='blue')))
            fig.add_trace(go.Scatter(x = pred.index, y = pred, mode = "lines+markers", name = "Predicted",line=dict(color='red')))

            st.plotly_chart(fig, use_container_width= True)
      
        with tab2:
            st.markdown("### Pr√©dictions avec le mod√®le SARIMA")

            txt = ''' Le mod√®le SARIMA int√®gre une composante saisonni√®re qui nous permet cette fois-ci d'effectuer les pr√©dictions √† partir des donn√©es mensuelles
            '''
            st.markdown(txt)

            with st.expander("Afficher les donn√©es utilis√©es pour l'analyse"):
                choix = st.radio("Afficher le dataframe 'Donn√©es mensuelles' brut ou retrait√© ?", ["Brut","Retrait√©"],key = 'annuel_1', horizontal= True, label_visibility= "collapsed")
                if choix == "Brut":
                    st.dataframe(st.session_state.df_GLB)
                elif choix == "Retrait√©":
                    st.dataframe(st.session_state.df_GLBRetraite)

            st.markdown('#### Pr√©dictions √† 2050 avec le mod√®le optimis√©')
            
            df = st.session_state.df_GLBRetraite

            sarima_opti = charger_modele(sarima_glob_opti)
            pred = sarima_opti.predict(0,((2050-1880)*12)+11)

            st.metric("RMSE",0.1830) 
            #Pas possible de la recalculer car le mod√®le est entra√Æner sur tout l'ensemble
            #On r√©cup√®re donc la RMSE issue de la ParamterGrid

            fig = go.Figure()

            fig.add_trace(go.Scatter(x = pred.index, y = df.Temp, mode = "lines+markers", name = "Actual", line=dict(color='blue')))
            fig.add_trace(go.Scatter(x = pred.index, y = pred, mode = "lines+markers", name = "Predicted",line=dict(color='red')))

            st.plotly_chart(fig, use_container_width= True)
        
        with tab3:
            st.markdown("### Pr√©dictions avec le mod√®le PROPHET")

            txt = ''' Le mod√®le PROPHET √©tant adapt√© pour pr√©dire des donn√©es mensuelles, nous utilisons l√† aussi le dataset avec les donn√©es par ann√©es et par mois.
            '''
            st.markdown(txt)

            with st.expander("Afficher les donn√©es utilis√©es pour l'analyse"):
                choix = st.radio("Afficher le dataframe 'Donn√©es mensuelles' brut ou retrait√© ?", ["Brut","Retrait√©"],key = 'annuel_2', horizontal= True, label_visibility= "collapsed")
                if choix == "Brut":
                    st.dataframe(st.session_state.df_GLB)
                elif choix == "Retrait√©":
                    st.dataframe(st.session_state.df_GLBRetraite)

            st.markdown('#### Pr√©dictions √† 2050 avec le mod√®le optimis√©')
            
            df = st.session_state.df_GLBRetraite
            df = df.rename(columns={"date":"ds","Temp":"y"})

            st.metric("RMSE",0.1808)

            m = charger_modele(prophet_glob_opti)
            future = m.make_future_dataframe(periods=324, freq='MS')
            forecast = m.predict(future)

            st.plotly_chart(plot_plotly(m,forecast), use_container_width= True)

if radio == "Pr√©diction des temp√©ratures par h√©misph√®re":

        st.markdown("# Mod√©lisation")
        st.markdown(f"## {radio}")
        txt = ''' Les r√©sultats sur les temp√©ratures globales √©tant assez satisfaisants nous avons poursuivi notre analyse sur les pr√©dictions des temp√©ratures
        par h√©misph√®res, en conservant la m√™me m√©thodologie que celle utilis√©e pour la pr√©diction des temp√©ratures globales. Par soucis de simplification, nous ne pr√©senterons ici
        que les pr√©dictions issues des mod√®les "optimis√©s".
        '''
        st.markdown(txt)

        tab1, tab2, tab3 = st.tabs(["ARIMA","SARIMA","PROPHET"])

        with tab1:
            st.markdown("### Pr√©dictions avec le mod√®le ARIMA")

            hem = st.radio("Choix h√©misph√®re :", ["H√©misph√®re NORD", "H√©misph√®re SUD"], horizontal= True, label_visibility= 'collapsed')

            if hem == "H√©misph√®re NORD":

                st.markdown("#### Pr√©dictions des temp√©ratures pour l'h√©misph√®re Nord")
                df = st.session_state.df_ZonAnn
                df = df[["Year","NHem"]]
                df['Year'] = pd.to_datetime(df['Year'], format='%Y')
                df = df.rename(columns={"Year":"Date","NHem":"Temp"})
                df = df.set_index("Date")
                st.session_state.df_ZonAnn_Nh_Retraite = df

                arima = charger_modele(arima_nh_opti)

                with st.expander("Afficher les donn√©es utilis√©es pour l'analyse"):
                    choix = st.radio("Afficher le dataframe 'Donn√©es mensuelles' brut ou retrait√© ?", ["Brut","Retrait√©"],key = 'annuel_nh', horizontal= True, label_visibility= "collapsed")
                    if choix == "Brut":
                        st.dataframe(st.session_state.df_ZonAnn)
                    elif choix == "Retrait√©":
                        st.dataframe(st.session_state.df_ZonAnn_Nh_Retraite)
                
                st.metric("RMSE :", 0.1286)

                pred = arima.predict(0,170)

                fig = go.Figure()

                fig.add_trace(go.Scatter(x = pred.index, y = df.Temp, mode = "lines+markers", name = "Actual", line=dict(color='blue')))
                fig.add_trace(go.Scatter(x = pred.index, y = pred, mode = "lines+markers", name = "Predicted",line=dict(color='red')))

                st.plotly_chart(fig, use_container_width= True)
            
            elif hem == "H√©misph√®re SUD":

                st.markdown("#### Pr√©dictions des temp√©ratures pour l'h√©misph√®re Sud")
                df = st.session_state.df_ZonAnn
                df = df[["Year","SHem"]]
                df['Year'] = pd.to_datetime(df['Year'], format='%Y')
                df = df.rename(columns={"Year":"Date","SHem":"Temp"})
                df = df.set_index("Date")
                st.session_state.df_ZonAnn_Sh_Retraite = df

                arima = charger_modele(arima_sh_opti)

                with st.expander("Afficher les donn√©es utilis√©es pour l'analyse"):
                    choix = st.radio("Afficher le dataframe 'Donn√©es mensuelles' brut ou retrait√© ?", ["Brut","Retrait√©"],key = 'annuel_sh', horizontal= True, label_visibility= "collapsed")
                    if choix == "Brut":
                        st.dataframe(st.session_state.df_ZonAnn)
                    elif choix == "Retrait√©":
                        st.dataframe(st.session_state.df_ZonAnn_Sh_Retraite)
                
                st.metric("RMSE :", 0.0786)

                pred = arima.predict(0,170)

                fig = go.Figure()

                fig.add_trace(go.Scatter(x = pred.index, y = df.Temp, mode = "lines+markers", name = "Actual", line=dict(color='blue')))
                fig.add_trace(go.Scatter(x = pred.index, y = pred, mode = "lines+markers", name = "Predicted",line=dict(color='red')))

                st.plotly_chart(fig, use_container_width= True)

        with tab2:
            st.markdown("### Pr√©dictions avec le mod√®le SARIMA")

            hem = st.radio("Choix h√©misph√®re :", ["H√©misph√®re NORD", "H√©misph√®re SUD"], horizontal= True, label_visibility= 'collapsed', key = 'sarima_hem')

            if hem == "H√©misph√®re NORD":

                st.markdown("#### Pr√©dictions des temp√©ratures pour l'h√©misph√®re Nord")
                df = st.session_state.df_NH
                df = transform_df_hem(df)
                st.session_state.df_NH_Retraite = df

                sarima = charger_modele(sarima_nh_opti)

                with st.expander("Afficher les donn√©es utilis√©es pour l'analyse"):
                    choix = st.radio("Afficher le dataframe 'Donn√©es mensuelles' brut ou retrait√© ?", ["Brut","Retrait√©"],key = 'mensuel_sarima_nh', horizontal= True, label_visibility= "collapsed")
                    if choix == "Brut":
                        st.dataframe(st.session_state.df_NH)
                    elif choix == "Retrait√©":
                        st.dataframe(st.session_state.df_NH_Retraite)
                
                st.metric("RMSE :", 0.2411)

                pred = sarima.predict(0,2051)

                fig = go.Figure()

                fig.add_trace(go.Scatter(x = pred.index, y = df.Temp, mode = "lines+markers", name = "Actual", line=dict(color='blue')))
                fig.add_trace(go.Scatter(x = pred.index, y = pred, mode = "lines+markers", name = "Predicted",line=dict(color='red')))

                st.plotly_chart(fig, use_container_width= True)
            
            elif hem == "H√©misph√®re SUD":

                st.markdown("#### Pr√©dictions des temp√©ratures pour l'h√©misph√®re Sud")
                df = st.session_state.df_SH
                df = transform_df_hem(df)
                st.session_state.df_SH_Retraite = df

                sarima = charger_modele(sarima_sh_opti)

                with st.expander("Afficher les donn√©es utilis√©es pour l'analyse"):
                    choix = st.radio("Afficher le dataframe 'Donn√©es mensuelles' brut ou retrait√© ?", ["Brut","Retrait√©"],key = 'mensuel_sarima_sh', horizontal= True, label_visibility= "collapsed")
                    if choix == "Brut":
                        st.dataframe(st.session_state.df_SH)
                    elif choix == "Retrait√©":
                        st.dataframe(st.session_state.df_SH_Retraite)
                
                st.metric("RMSE :", 0.1740)

                pred = sarima.predict(0,2051)

                fig = go.Figure()

                fig.add_trace(go.Scatter(x = pred.index, y = df.Temp, mode = "lines+markers", name = "Actual", line=dict(color='blue')))
                fig.add_trace(go.Scatter(x = pred.index, y = pred, mode = "lines+markers", name = "Predicted",line=dict(color='red')))

                st.plotly_chart(fig, use_container_width= True)

        with tab3:
            st.markdown("### Pr√©dictions avec le mod√®le PROPHET")

            hem = st.radio("Choix h√©misph√®re :", ["H√©misph√®re NORD", "H√©misph√®re SUD"], horizontal= True, label_visibility= 'collapsed', key = 'prophet_hem')

            if hem == "H√©misph√®re NORD":

                st.markdown("#### Pr√©dictions des temp√©ratures pour l'h√©misph√®re Nord")

                with st.expander("Afficher les donn√©es utilis√©es pour l'analyse"):
                    choix = st.radio("Afficher le dataframe 'Donn√©es mensuelles' brut ou retrait√© ?", ["Brut","Retrait√©"],key = 'mensuel_prophet_nh', horizontal= True, label_visibility= "collapsed")
                    if choix == "Brut":
                        st.dataframe(st.session_state.df_NH)
                    elif choix == "Retrait√©":
                        st.dataframe(st.session_state.df_NH_Retraite)

                st.metric("RMSE :", 0.2375)

                df = st.session_state.df_NH_Retraite
                df = df.rename(columns={"date":"ds","Temp":"y"})

                m =charger_modele(prophet_nh_opti)

                future = m.make_future_dataframe(periods= 324, freq = "MS")

                forecast = m.predict(future)

                st.plotly_chart(plot_plotly(m,forecast), use_container_width= True)

            elif hem == "H√©misph√®re SUD":
                
                st.markdown("#### Pr√©dictions des temp√©ratures pour l'h√©misph√®re Sud")

                with st.expander("Afficher les donn√©es utilis√©es pour l'analyse"):
                    choix = st.radio("Afficher le dataframe 'Donn√©es mensuelles' brut ou retrait√© ?", ["Brut","Retrait√©"],key = 'mensuel_prophet_sh', horizontal= True, label_visibility= "collapsed")
                    if choix == "Brut":
                        st.dataframe(st.session_state.df_SH)
                    elif choix == "Retrait√©":
                        st.dataframe(st.session_state.df_SH_Retraite)
                
                st.metric("RMSE :", 0.1864)

                df = st.session_state.df_SH_Retraite
                df = df.rename(columns={"date":"ds","Temp":"y"})

                m =charger_modele(prophet_sh_opti)

                future = m.make_future_dataframe(periods= 324, freq = "MS")

                forecast = m.predict(future)

                st.plotly_chart(plot_plotly(m,forecast), use_container_width= True)

if radio == "Conclusion":

        st.markdown("# Mod√©lisation")
        st.markdown(f"## {radio}")
        st.markdown("### Synth√®se des pr√©dictions au niveau global")

        result_global = {"RMSE" : ["0.1478", "0.1830", "0.1808"],
                         "Temp. 2050": ["+1.65¬∞C", "+1.71¬∞C", "+1.60¬∞C"]}
        result_global = pd.DataFrame(result_global, index=["ARIMA Optimis√©", "SARIMA Optimis√©", "PROPHET Optimis√©"]).T

        st.dataframe(result_global, use_container_width= True)

        txt = ''' Les r√©sultats de ces pr√©visions √† l'√©chelle globale sont plut√¥t encourageants. L'ensemble des mod√®les test√©s obtiennent des r√©sultats
        plut√¥t satisfaisants, c'est √† dire, une RMSE acceptable ainsi que des pr√©visions √† 2050 en ad√©quation avec les donn√©es historiques. 
        De plus, on remarque que les pr√©visions retourn√©es sont assez proches (de +1.60¬∞C √† +1.71¬∞C) ce qui laisse penser que les r√©sultats sont plut√¥t coh√©rents.
        '''
        st.markdown(txt)

        st.markdown("### Synth√®se des pr√©dictions par h√©misph√®re")

        st.markdown("#### H√©misph√®re Nord")

        result_nh = {"RMSE" : ["0.1860", "0.2410", "0.2374"],
                         "Temp. 2050": ["+2.71¬∞C", "+3.37¬∞C", "+2.11¬∞C"]}
        result_nh = pd.DataFrame(result_nh, index=["ARIMA Optimis√©", "SARIMA Optimis√©", "PROPHET Optimis√©"]).T

        st.dataframe(result_nh, use_container_width= True)

        st.markdown("#### H√©misph√®re Sud")

        result_sh = {"RMSE" : ["0.0786", "0.1740", "0.1864"],
                         "Temp. 2050": ["+1.06¬∞C", "+1.05¬∞C", "+0.95¬∞C"]}
        result_sh = pd.DataFrame(result_sh, index=["ARIMA Optimis√©", "SARIMA Optimis√©", "PROPHET Optimis√©"]).T

        st.dataframe(result_sh, use_container_width= True)

        txt = '''Globalement, les r√©sultats obtenus sur ces pr√©visions restent coh√©rents et soulignent une fois de plus les disparit√©s qu'il peut exister entre
        diff√©rentes zones g√©ographiques.  
        Sur l'h√©misph√®re sud, les pr√©visions retourn√©es semblent √™tre coh√©rentes avec une RMSE correcte et des temp√©ratures assez proches d'un mod√®le √† un autre.  
        Sur l'h√©mipsh√®re nord, les r√©sultats sont plus mitig√©s avec une RMSE nettement sup√©rieure √† l'h√©misph√®re Sud, ce qui suppose une marge d'erreur plus grande.
        De plus, les pr√©visions varient beaucoup d'un mod√®le √† un autre, et encore plus avec le mod√®le SARIMA qui para√Æt avoir plus de mal √† pr√©dire les donn√©es de cet h√©misph√®re.
        '''

        st.markdown(txt)