import streamlit as st
import numpy as np
import pandas as pd
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import plotly.express as px
from scipy.stats import pearsonr

st.set_page_config(
    page_title="DataVizualisation",
    page_icon="ğŸ“Š",
    layout = 'wide'
)

#Import des dataframes aprÃ¨s retraitements Ã  partir du fichier import_data.py

df_owid = st.session_state.df_owid
long_lat = st.session_state.df_long_lat
loti_ZonAnn = st.session_state.df_ZonAnn

# Stockage des dataframes transformÃ©s :
#long_lat cleaned
longlat_cleaned = long_lat.drop(['ISO-ALPHA-2','FIFA','ISO-Name','Historical','WikiData_ID','WikiData_Latitude','WikiData_Longitude','WikiData_Label','WikiData_Description'],axis = 1)
#On commence par supprimer les lignes oÃ¹ le code ISO n'est pas renseignÃ©
longlat_cleaned = longlat_cleaned[longlat_cleaned["ISO-ALPHA-3"].notnull()]
#Ensuite, on supprime les lignes identifiÃ©es en doublons avec Latitude et Longitude diffÃ©rente afin de conserver celles qui semblent Ãªtre les plus pertinentes
index_west_germany = longlat_cleaned.loc[longlat_cleaned["Country"]== "West Germany"].index
longlat_cleaned = longlat_cleaned.drop(index_west_germany)
index_north_yemen = longlat_cleaned.loc[longlat_cleaned["Country"]== "North Yemen"].index
longlat_cleaned = longlat_cleaned.drop(index_north_yemen)
#Ensuite, on supprime tous les autres doublons (peu importe celui que l'on conserve car ils ont la mÃªme valeur de latitude et longitude)
longlat_cleaned = longlat_cleaned.drop_duplicates(subset = "ISO-ALPHA-3", keep = "first")
st.session_state.longlat_cleaned = longlat_cleaned

#df_owid3
# On fusionne le df owid avec le fichier latitudes nettoyÃ© grÃ¢ce Ã  merge
dico = {'iso_code':'ISO-ALPHA-3'}
df_owid = df_owid.rename(dico, axis = 1)
df_owid2 = df_owid.merge(right = longlat_cleaned, on = 'ISO-ALPHA-3')

# On supprimes les NaN en se basant sur la colonne iso alpha 3
df_owid3 = df_owid2.dropna(axis=0,subset = 'ISO-ALPHA-3')

# On sÃ©quence les pays / hÃ©misphere et latitudes :/3 et /8
# CrÃ©ation d'une colonne avec l'hÃ©misphÃ¨re d'appartenance
def hemisphere1(x):
    if x >= 0:
        return 'HN'
    if x <= 0:
        return 'HS'

df_owid3['Hemisphere'] = df_owid3['Latitude'].apply(hemisphere1)

# CrÃ©ation d'une colonne avec la strate d'appartenance (/3)
def hemisphere2(x):
    if x >= 24:
        return '24N-90N'
    if x > -24 and x < 24:
        return '24S-24N'
    if x < -24:
        return '90S-24S'

df_owid3['Cut 3 strats'] = df_owid3['Latitude'].apply(hemisphere2)

# CrÃ©ation d'une colonne avec la strate d'appartenance (/8)
def hemisphere3(x):
    if x > 64:
        return '64N-90N'
    if x > 44 and x < 64:
        return '44N-64N'
    if x > 24 and x < 44:
        return '24N-44N'
    if x > 0 and x < 24:
        return 'EQU-24N'
    if x < 0 and x > -24:
        return '24S-EQU'
    if x < -24 and x > -44:
        return '44S-24S'
    if x < -44 and x > -64:
        return '64S-44S'
    if x < -64:
        return '90S-64S'

df_owid3['Cut 8 strats'] = df_owid3['Latitude'].apply(hemisphere3)

st.session_state.df_owid3 = df_owid3

#df_gdp_co2_ghg
#SÃ©lection des champs utiles Ã  l'analyse et rÃ©duction du Dataset
#Population / GDP / Co2 / GHG
selected_cols = ['country', 'year', 'ISO-ALPHA-3','population', 'gdp','co2','total_ghg']
df_filtered = df_owid3[selected_cols]

#SÃ©lection des champs utiles Ã  l'analyse et rÃ©duction du Dataset
cols_gdp_co2_ghg = ['country', 'year', 'ISO-ALPHA-3','gdp','co2','population','total_ghg']

#On filtre sur iso_code not null pour supprimer les donnÃ©es des continents
#On sÃ©lectionne l'intervalle de date qui paraÃ®t la plus optimale car intÃ©grant une disponibilitÃ© de donnÃ©es de maniÃ¨re Ã©gale (1990 - 2018)
df_gdp_co2_ghg = df_owid3.loc[(df_owid3["ISO-ALPHA-3"].notnull()) & (df_owid3["year"].between(1990,2018)),selected_cols]

st.session_state.df_gdp_co2_ghg = df_gdp_co2_ghg

st.title("DataVizualisation")


radio = st.sidebar.radio("**DataVizualisation - Sommaire**", ("Introduction","Fusion bases de donnÃ©es","Evolutions entre 1990 et 2018","Evolution tempÃ©ratures de 1880 Ã  2023","CorrÃ©lation entre variables","Conclusion"))

if radio == "Introduction":

    st.write("**Nous allons Ã  prÃ©sent rÃ©aliser des projections visuels sur les jeux de donnÃ©es en notre possession :**")
    st.markdown("- Dans un premier temps, nous allons faire un rapprochement entre le dataframe owid et l'Ã©volution des tempÃ©ratures par annÃ©e du fichier loti ZonAnn")
    st.markdown("- Dans un deuxiÃ¨me temps, cela nous permettra de montrer l'Ã©volution des tempÃ©ratures sur la pÃ©riode sÃ©lectionnÃ©e, par zone")
    st.markdown("- Ensuite, dans un troisiÃ¨me temps, nous allons nous concentrer sur l'Ã©volution des tempÃ©ratures par zones de 1880 Ã  2023")
    st.markdown("- Enfin, nous allons montrer la corrÃ©lation entre variables")


if radio == "Fusion bases de donnÃ©es":

    st.write("Comme annoncÃ© en prÃ©ambule, nous allons faire un rapprochement entre le dataframe owid et l'Ã©volution des tempÃ©ratures par annÃ©e du fichier loti ZonAnn")
    st.write("Ce rapprochement entre les deux bases de donnÃ©es sera rÃ©alisÃ© grÃ¢ce Ã  un fichier qui reprend les longitudes-latitudes pour tous les pays du globe")

    st.markdown("- Le fichier se prÃ©sente de la maniÃ¨re suivante")
    st.dataframe(long_lat.head())
    st.markdown("- Informations dataframe")
    col1, col2, col3 = st.columns(3)
    #Nombre d'indicateurs
    col1.metric("Nombre de colonnes", long_lat.shape[1])
    col2.metric("Nombre de lignes", long_lat.shape[0])
    col3.metric("Taux de valeurs manquantes", (long_lat.isna().mean().mean() *100).round(2))

    col_text, col_img = st.columns([0.7,0.3])

    with col_text:
      st.markdown("- On ne retient du fichier de latitudes longitudes que les donnÃ©es qui nous intÃ©ressent")

      longlat_cleaned = long_lat.drop(['ISO-ALPHA-2','FIFA','ISO-Name','Historical','WikiData_ID','WikiData_Latitude','WikiData_Longitude','WikiData_Label','WikiData_Description'],axis = 1)
      st.dataframe(longlat_cleaned.head())
    
    with col_img:
      st.image("/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Streamlit/Image3.jpg")

    st.write("**Notre dataframe longitude-latitude nÃ©cessite encore les opÃ©rations suivantes avant la fusion avec la base owid :**")
    st.markdown("- Suppression des lignes oÃ¹ le code ISO n'est pas renseignÃ©")
    st.markdown("- Suppression des lignes identifiÃ©es en doublons avec Latitude et Longitude diffÃ©rente afin de conserver celles qui semblent Ãªtre les plus pertinentes")
    st.markdown("- Suppresion d'autres doublons sur le code ISO ALPHA 3")

    st.write("**Sur le nouveau dataframe crÃ©Ã© :**")
    st.markdown("- Fusion des dataframes sur la colonne ISO ALPHA 3")
    st.markdown("- Suppression des valeurs nulles sur ISO ALPHA 3")
    st.markdown("- SÃ©quenÃ§age des pays par hÃ©misphÃ¨re, par strates de 3 et strates de 8")
    
    st.dataframe(df_owid3.head())

    st.write("**Notre dataset est prÃªt pour nos visuels !**:smiley:")
    
if radio == "Evolutions entre 1990 et 2018":
    
    df_owid3 = st.session_state.df_owid3

    st.write("Nous pouvons Ã  prÃ©sent rÃ©aliser des premiers visuels par zones de 1990 Ã  2018")
    st.markdown("## Au niveau global :")
    st.markdown("- AprÃ¨s rÃ©dution du dataset, suppression des valeurs nulles et des valeurs qui ne nous intÃ©ressent pas dans notre Ã©tude, nous avons la base ci-dessous :")

    st.dataframe(df_gdp_co2_ghg.head())

    st.markdown("### CrÃ©ation d'un dataframe par variables que l'on va projeter :")
    st.write("A noter que le dernier dataframe va nous permettre de suivre la disponibilitÃ© des valeurs au fil des annÃ©es")
    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e Ã  l'Ã©chelle mondiale
    co2_by_year = df_gdp_co2_ghg.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e Ã  l'Ã©chelle mondiale
    gdp_by_year = df_gdp_co2_ghg.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e Ã  l'Ã©chelle mondiale
    pop_by_year = df_gdp_co2_ghg.groupby("year")["population"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e Ã  l'Ã©chelle mondiale
    ghg_by_year = df_gdp_co2_ghg.groupby("year")["total_ghg"].sum()

    #On crÃ©e un dataframe qui va permettre de compter pour chacune des variables le nombre de valeurs renseignÃ©es
    values_by_year = df_gdp_co2_ghg.groupby("year").agg({'country': 'count',
                                        'gdp': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                        'co2': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'total_ghg': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'population': lambda x: ((x.notnull()) & (x != 0)).sum()})

    with st.expander("Afficher les dataframes utilisÃ©es pour l'analyse"):
        choix = st.radio("Afficher les dataframes ?", ["CO2/An","PIB/An","Population/An","Gaz Ã  effet de serre/An","DÃ©compte Valeurs"], horizontal= True, label_visibility= "collapsed")
        if choix == "CO2/An":
            st.dataframe(co2_by_year)
        if choix == "PIB/An":
            st.dataframe(gdp_by_year)
        if choix == "Population/An":
            st.dataframe(pop_by_year)
        if choix == "Gaz Ã  effet de serre/An":
            st.dataframe(ghg_by_year)
        if choix == "DÃ©compte Valeurs":
            st.dataframe(values_by_year)


    st.markdown("### Projection visuelle des donnÃ©es globales :")

    #CO2
    co2 = make_subplots(rows=2, cols=1, subplot_titles=('CO2 Emissions', 'Count variables'), vertical_spacing= 0.5, shared_xaxes= True)
    co2.add_trace(go.Scatter(x = co2_by_year.index, y = co2_by_year.values,mode='lines+markers', name='Evol Co2' ))

    traces = []
    for column in values_by_year.columns:
        trace = go.Scatter(x=values_by_year.index, y=values_by_year[column], mode='lines+markers', name='Value count')
    traces.append(trace)
    for trace in traces:
        co2.add_trace(trace, row = 2, col = 1)

    co2.update_layout(xaxis_title = "Year", yaxis_title = "CO2")

    #gdp
    gdp = make_subplots(rows=2, cols=1, subplot_titles=('GDP Emissions', 'Count variables'), vertical_spacing= 0.5, shared_xaxes= True)
    gdp.add_trace(go.Scatter(x = gdp_by_year.index, y = gdp_by_year.values,mode='lines+markers', name='Evol Co2' ))

    traces = []
    for column in values_by_year.columns:
        trace = go.Scatter(x=values_by_year.index, y=values_by_year[column], mode='lines+markers', name="Value count")
    traces.append(trace)
    for trace in traces:
        gdp.add_trace(trace, row=2, col=1)

    gdp.update_layout(xaxis_title = "Year", yaxis_title = "GDP")

    #population
    pop = make_subplots(rows=2, cols=1, subplot_titles=('Population', 'Count variables'), vertical_spacing = 0.5, shared_xaxes= True)
    pop.add_trace(go.Scatter(x = pop_by_year.index, y = pop_by_year.values,mode='lines+markers', name='Evol Co2' ))

    traces = []
    for column in values_by_year.columns:
        trace = go.Scatter(x=values_by_year.index, y=values_by_year[column], mode='lines+markers', name="Value count")
    traces.append(trace)
    for trace in traces:
        pop.add_trace(trace, row=2, col=1)

    pop.update_layout(xaxis_title = "Year", yaxis_title = "Population")

    #ghg
    ghg = make_subplots(rows=2, cols=1, subplot_titles=('GHG Emissions', 'Count variables'), vertical_spacing = 0.5, shared_xaxes= True)
    ghg.add_trace(go.Scatter(x = ghg_by_year.index, y = ghg_by_year.values,mode='lines+markers', name='Evol Co2' ))

    traces = []
    for column in values_by_year.columns:
        trace = go.Scatter(x=values_by_year.index, y=values_by_year[column], mode='lines+markers', name="Value count")
    traces.append(trace)
    for trace in traces:
        ghg.add_trace(trace, row=2, col=1)

    ghg.update_layout(xaxis_title = "Year", yaxis_title = "GHG")

    tab1, tab2, tab3, tab4 = st.tabs(["CO2 Evolution","GDP Evolution","Population Evolution","GHG Evolution"])
    with tab1 :
        st.plotly_chart(co2)
    with tab2 :
        st.plotly_chart(gdp)
    with tab3 :
        st.plotly_chart(pop)
    with tab4 :
        st.plotly_chart(ghg)

    st.markdown("## Par HÃ©miphÃ¨re Nord et Sud :")
    st.markdown("- Nous allons Ã  prÃ©sent pousser cette analyse dans le dÃ©tail gÃ©ographique en commenÃ§ant par les hÃ©misphÃ¨res :")

    #SÃ©lection des champs utiles Ã  l'analyse et rÃ©duction du Dataset
    infos_strates = ['country', 'year', 'ISO-ALPHA-3','gdp','co2','total_ghg','population','Hemisphere','Cut 3 strats','Cut 8 strats']
    strates = df_owid3[infos_strates]

    # Evolution des variables sur les hÃ©misphÃ¨res
    # CrÃ©ation du df avec seulement l'HN de 1990 Ã  2018
    strates_hn = strates.loc[(strates['Hemisphere'] == 'HN') & (strates['year'].between(1990,2018))]

    # CrÃ©ation du df avec seulement l'HS de 1990 Ã  2018
    strates_hs = strates.loc[(strates['Hemisphere'] == 'HS') & (strates['year'].between(1990,2018))]

    st.markdown("### Projections rÃ©alisÃ©es Ã  partir des 2 dataframes ci-dessous :")

    with st.expander("Afficher les dataframes utilisÃ©es pour l'analyse"):
            choix = st.radio("Afficher les dataframes ?", ["Dataframe HÃ©misphÃ¨re Nord","Dataframe HÃ©misphÃ¨re Sud"], horizontal= True, label_visibility= "collapsed")
            if choix == "Dataframe HÃ©misphÃ¨re Nord":
                st.dataframe(strates_hn)
            if choix == "Dataframe HÃ©misphÃ¨re Sud":
                st.dataframe(strates_hs)

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour HN
    co2_hn = strates_hn.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour HN
    gdp_hn = strates_hn.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour HN
    ghg_hn = strates_hn.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour HN
    pop_hn = strates_hn.groupby("year")["population"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour HS
    co2_hs = strates_hs.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour HS
    gdp_hs = strates_hs.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour HS
    ghg_hs = strates_hs.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour HS
    pop_hs = strates_hs.groupby("year")["population"].sum()

    #On crÃ©e les df qui vont permettre de compter pour chaque hÃ©misphÃ¨re le nombre de valeurs renseignÃ©es
    values_by_year_hn = strates_hn.groupby("year").agg({'country': 'count',
                                        'gdp': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                        'co2': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'total_ghg': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'population': lambda x: ((x.notnull()) & (x != 0)).sum()})

    values_by_year_hs = strates_hs.groupby("year").agg({'country': 'count',
                                        'gdp': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                        'co2': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'total_ghg': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'population': lambda x: ((x.notnull()) & (x != 0)).sum()})

    # DÃ©compte de la disponibilitÃ© des donnÃ©es par hÃ©misphÃ¨re
    h_count = make_subplots(rows=1, cols=2, subplot_titles=('DÃ©compte variables HN','DÃ©compte variables HS'))

    tab1, tab2, tab3, tab4, tab5 = st.tabs([" Evolution CO2","Evolution Gaz Ã  effet de serre","Evolution population","Evolution PIB","DÃ©compte valeurs"])
    with tab1 :
        # TracÃ© des visuels par hÃ©misphÃ¨re
        h_co2n = go.Figure()
        h_co2n.add_trace(go.Scatter(x = co2_hn.index, y = co2_hn.values,mode='lines+markers', name='Evol HN' ))
        h_co2n.update_layout(title = "Evolution HÃ©misphÃ¨re Nord")
        st.plotly_chart(h_co2n)

        h_co2s = go.Figure()
        h_co2s.add_trace(go.Scatter(x = co2_hs.index, y = co2_hs.values,mode='lines+markers', name='Evol HS' ))
        h_co2s.update_layout(title = "Evolution HÃ©misphÃ¨re Sud")
        st.plotly_chart(h_co2s)

    with tab2 :
        h_ghgn = go.Figure()
        h_ghgn.add_trace(go.Scatter(x = ghg_hn.index, y = ghg_hn.values,mode='lines+markers', name='Evol HN' ))
        h_ghgn.update_layout(title = "Evolution HÃ©misphÃ¨re Nord")
        st.plotly_chart(h_ghgn)

        h_ghgs = go.Figure()
        h_ghgs.add_trace(go.Scatter(x = ghg_hs.index, y = ghg_hs.values,mode='lines+markers', name='Evol HS' ))
        h_ghgs.update_layout(title = "Evolution HÃ©misphÃ¨re Sud")
        st.plotly_chart(h_ghgs)

    with tab3 :
        h_popn = go.Figure()
        h_popn.add_trace(go.Scatter(x = pop_hn.index, y = pop_hn.values,mode='lines+markers', name='Evol HN' ))
        h_popn.update_layout(title = "Evolution HÃ©misphÃ¨re Nord")
        st.plotly_chart(h_popn)

        h_pops = go.Figure()
        h_pops.add_trace(go.Scatter(x = pop_hs.index, y = pop_hs.values,mode='lines+markers', name='Evol HS' ))
        h_pops.update_layout(title = "Evolution HÃ©misphÃ¨re Sud")
        st.plotly_chart(h_pops)

    with tab4 :
        h_gdpn = go.Figure()
        h_gdpn.add_trace(go.Scatter(x = gdp_hn.index, y = gdp_hn.values, mode = "lines+markers", name = "Evol HN" ))
        h_gdpn.update_layout(title = "Evolution HÃ©misphÃ¨re Nord")
        st.plotly_chart(h_gdpn)

        h_gdps = go.Figure()
        h_gdps.add_trace(go.Scatter(x = gdp_hs.index, y = gdp_hs.values, mode = "lines+markers", name = "Evol HS" ))
        h_gdps.update_layout(title = "Evolution HÃ©misphÃ¨re Sud")
        st.plotly_chart(h_gdps)

    with tab5 :
        traces = []
        traces_2 = []

        for column in values_by_year_hn.columns:
            trace_hn = go.Scatter(x=values_by_year_hn.index, y=values_by_year_hn[column], mode='lines+markers', name=column)
            traces.append(trace_hn)

        for column in values_by_year_hs.columns:
            trace_hs = go.Scatter(x=values_by_year_hs.index, y=values_by_year_hs[column], mode='lines+markers', name=column)
            traces_2.append(trace_hs)

        for trace_hn in traces:h_count.add_trace(trace_hn, row=1, col=1)
        for trace_hs in traces_2:h_count.add_trace(trace_hs, row=1, col=2)
        st.plotly_chart(h_count)

    st.markdown("## Par strates sur 3 niveaux :")
    st.markdown("- Nous allons Ã  prÃ©sent nous concentrer sur le dÃ©coupage par 3 strates :")
    st.markdown("- AprÃ¨s rÃ©duction du dataset, nous appliquons un groupby qui va faire la somme de chaque variable par annÃ©e :")

    # Evolution des variables sur les 3 strates
    # CrÃ©ation du df avec seulement la strate 1/3 de 1990 Ã  2018
    strates_1_3 = strates.loc[(strates['Cut 3 strats'] == '24N-90N') & (strates['year'].between(1990,2018))]

    # CrÃ©ation du df avec seulement la strate 2/3 de 1990 Ã  2018
    strates_2_3 = strates.loc[(strates['Cut 3 strats'] == '24S-24N') & (strates['year'].between(1990,2018))]

    # CrÃ©ation du df avec seulement la strate 1/3 de 1990 Ã  2018
    strates_3_3 = strates.loc[(strates['Cut 3 strats'] == '90S-24S') & (strates['year'].between(1990,2018))]

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour 1/3
    co2_1_3 = strates_1_3.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour 1/3
    gdp_1_3 = strates_1_3.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour 1/3
    ghg_1_3 = strates_1_3.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour 1/3
    pop_1_3 = strates_1_3.groupby("year")["population"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour 2/3
    co2_2_3 = strates_2_3.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour 2/3
    gdp_2_3 = strates_2_3.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour 2/3
    ghg_2_3 = strates_2_3.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour 2/3
    pop_2_3 = strates_2_3.groupby("year")["population"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour 3/3
    co2_3_3 = strates_3_3.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour 3/3
    gdp_3_3 = strates_3_3.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour 3/3
    ghg_3_3 = strates_3_3.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour 3/3
    pop_3_3 = strates_3_3.groupby("year")["population"].sum()

    #On crÃ©e les df qui vont permettre de compter pour chaque strate le nombre de valeurs renseignÃ©es
    values_by_year_1_3 = strates_1_3.groupby("year").agg({'country': 'count',
                                        'gdp': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                        'co2': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'total_ghg': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'population': lambda x: ((x.notnull()) & (x != 0)).sum()})

    values_by_year_2_3 = strates_2_3.groupby("year").agg({'country': 'count',
                                        'gdp': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                        'co2': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'total_ghg': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'population': lambda x: ((x.notnull()) & (x != 0)).sum()})

    values_by_year_3_3 = strates_3_3.groupby("year").agg({'country': 'count',
                                        'gdp': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                        'co2': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'total_ghg': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                            'population': lambda x: ((x.notnull()) & (x != 0)).sum()})


    tab1, tab2, tab3, tab4, tab5 = st.tabs([" Evolution CO2","Evolution Gaz Ã  effet de serre","Evolution population","Evolution PIB","DÃ©compte valeurs"])
    with tab1 :
        # TracÃ© des visuels pour les 3 strates
        co2_st = go.Figure()
        co2_st.add_trace(go.Scatter(x = co2_1_3.index, y = co2_1_3.values,mode='lines+markers', name='1.24N-90N'))
        co2_st.add_trace(go.Scatter(x = co2_2_3.index, y = co2_2_3.values,mode='lines+markers', name='2.24S-24N'))
        co2_st.add_trace(go.Scatter(x = co2_3_3.index, y = co2_3_3.values,mode='lines+markers', name='3.90S-24S'))
        co2_st.update_layout(title = 'Evolution CO2')
        st.plotly_chart(co2_st)

    with tab2 :
        ghg_st = go.Figure()
        ghg_st.add_trace(go.Scatter(x = ghg_1_3.index, y = ghg_1_3.values,mode='lines+markers', name='1.24N-90N'))
        ghg_st.add_trace(go.Scatter(x = ghg_2_3.index, y = ghg_2_3.values,mode='lines+markers', name='2.24S-24N'))
        ghg_st.add_trace(go.Scatter(x = ghg_3_3.index, y = ghg_3_3.values,mode='lines+markers', name='3.90S-24S'))
        ghg_st.update_layout(title = 'Evolution Gaz Ã  effet de serre')
        st.plotly_chart(ghg_st)

    with tab3 :
        pop_st = go.Figure()
        pop_st.add_trace(go.Scatter(x = pop_1_3.index, y = pop_1_3.values,mode='lines+markers', name='1.24N-90N'))
        pop_st.add_trace(go.Scatter(x = pop_2_3.index, y = pop_2_3.values,mode='lines+markers', name='2.24S-24N'))
        pop_st.add_trace(go.Scatter(x = pop_3_3.index, y = pop_3_3.values,mode='lines+markers', name='3.90S-24S'))
        pop_st.update_layout(title = 'Evolution Population')
        st.plotly_chart(pop_st)

    with tab4 :
        gdp_st = go.Figure()
        gdp_st.add_trace(go.Scatter(x = gdp_1_3.index, y = gdp_1_3.values,mode='lines+markers', name='1.24N-90N'))
        gdp_st.add_trace(go.Scatter(x = gdp_2_3.index, y = gdp_2_3.values,mode='lines+markers', name='2.24S-24N'))
        gdp_st.add_trace(go.Scatter(x = gdp_3_3.index, y = gdp_3_3.values,mode='lines+markers', name='3.90S-24S'))
        gdp_st.update_layout(title = 'Evolution PIB')
        st.plotly_chart(gdp_st)

    with tab5 :
        # DÃ©compte de la disponibilitÃ© des donnÃ©es par strate
        fig = make_subplots(rows=1, cols=3, subplot_titles=('DÃ©compte variables 1Ã¨re strate','DÃ©compte variables 2Ã¨me strate','DÃ©compte variables 3Ã¨me strate'))

        traces = []
        traces_2 = []
        traces_3 = []

        for column in values_by_year_1_3.columns:
            trace_1_3 = go.Scatter(x=values_by_year_1_3.index, y=values_by_year_1_3[column], mode='lines+markers', name=column)
            traces.append(trace_1_3)

        for column in values_by_year_2_3.columns:
            trace_2_3 = go.Scatter(x=values_by_year_2_3.index, y=values_by_year_2_3[column], mode='lines+markers', name=column)
            traces_2.append(trace_2_3)

        for column in values_by_year_3_3.columns:
            trace_3_3 = go.Scatter(x=values_by_year_3_3.index, y=values_by_year_3_3[column], mode='lines+markers', name=column)
            traces_3.append(trace_3_3)

        for trace_1_3 in traces:fig.add_trace(trace_1_3, row=1, col=1)
        for trace_2_3 in traces_2:fig.add_trace(trace_2_3, row=1, col=2)
        for trace_3_3 in traces_3:fig.add_trace(trace_3_3, row=1, col=3)
        st.plotly_chart(fig)

    st.markdown("## Par strates sur 8 niveaux :")
    st.markdown("- Nous allons Ã  prÃ©sent nous concentrer sur le dÃ©coupage par 8 strates :")
    st.markdown("- AprÃ¨s rÃ©duction du dataset, nous appliquons un nouveau groupby qui va faire la somme de chaque variable par annÃ©e sur une strate prÃ©cisÃ©:")

    # Evolution des variables sur les 8 strates
    # CrÃ©ation du df avec seulement la strate 1/8 de 1990 Ã  2018
    strates_1_8 = strates.loc[(strates['Cut 8 strats'] == '64N-90N') & (strates['year'].between(1990,2018))]

    # CrÃ©ation du df avec seulement la strate 2/8 de 1990 Ã  2018
    strates_2_8 = strates.loc[(strates['Cut 8 strats'] == '44N-64N') & (strates['year'].between(1990,2018))]

    # CrÃ©ation du df avec seulement la strate 3/8 de 1990 Ã  2018
    strates_3_8 = strates.loc[(strates['Cut 8 strats'] == '24N-44N') & (strates['year'].between(1990,2018))]

    # CrÃ©ation du df avec seulement la strate 4/8 de 1990 Ã  2018
    strates_4_8 = strates.loc[(strates['Cut 8 strats'] == 'EQU-24N') & (strates['year'].between(1990,2018))]

    # CrÃ©ation du df avec seulement la strate 5/8 de 1990 Ã  2018
    strates_5_8 = strates.loc[(strates['Cut 8 strats'] == '24S-EQU') & (strates['year'].between(1990,2018))]

    # CrÃ©ation du df avec seulement la strate 6/8 de 1990 Ã  2018
    strates_6_8 = strates.loc[(strates['Cut 8 strats'] == '44S-24S') & (strates['year'].between(1990,2018))]

    # CrÃ©ation du df avec seulement la strate 7/8 de 1990 Ã  2018
    strates_7_8 = strates.loc[(strates['Cut 8 strats'] == '64S-44S') & (strates['year'].between(1990,2018))]

    # CrÃ©ation du df avec seulement la strate 8/8 de 1990 Ã  2018
    strates_8_8 = strates.loc[(strates['Cut 8 strats'] == '90S-64S') & (strates['year'].between(1990,2018))]

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour 1/8
    co2_1_8 = strates_1_8.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour 1/8
    gdp_1_8 = strates_1_8.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour 1/8
    ghg_1_8 = strates_1_8.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour 1/8
    pop_1_8 = strates_1_8.groupby("year")["population"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour 2/8
    co2_2_8 = strates_2_8.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour 2/8
    gdp_2_8 = strates_2_8.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour 2/8
    ghg_2_8 = strates_2_8.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour 2/8
    pop_2_8 = strates_2_8.groupby("year")["population"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour 3/8
    co2_3_8 = strates_3_8.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour 3/8
    gdp_3_8 = strates_3_8.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour 3/8
    ghg_3_8 = strates_3_8.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour 3/8
    pop_3_8 = strates_3_8.groupby("year")["population"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour 4/8
    co2_4_8 = strates_4_8.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour 4/8
    gdp_4_8 = strates_4_8.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour 4/8
    ghg_4_8 = strates_4_8.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour 4/8
    pop_4_8 = strates_4_8.groupby("year")["population"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour 5/8
    co2_5_8 = strates_5_8.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour 5/8
    gdp_5_8 = strates_5_8.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour 5/8
    ghg_5_8 = strates_5_8.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour 5/8
    pop_5_8 = strates_5_8.groupby("year")["population"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour 6/8
    co2_6_8 = strates_6_8.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour 6/8
    gdp_6_8 = strates_6_8.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour 6/8
    ghg_6_8 = strates_6_8.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour 6/8
    pop_6_8 = strates_6_8.groupby("year")["population"].sum()

    # On ne crÃ©e pas de df pour la strate 7/8 car ne retournant pas de rÃ©sultat

    #On crÃ©e le dataframe pour l'Ã©volution du co2 par annÃ©e pour 8/8
    co2_8_8 = strates_8_8.groupby("year")["co2"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du gdp par annÃ©e pour 8/8
    gdp_8_8 = strates_8_8.groupby("year")["gdp"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution du ghg par annÃ©e pour 8/8
    ghg_8_8 = strates_8_8.groupby("year")["total_ghg"].sum()

    #On crÃ©e le dataframe pour l'Ã©volution de la population par annÃ©e pour 8/8
    pop_8_8 = strates_8_8.groupby("year")["population"].sum()

    tab1, tab2, tab3, tab4 = st.tabs([" Evolution CO2","Evolution Gaz Ã  effet de serre","Evolution population","Evolution PIB"])
    with tab1 :
        co2_1 = go.Figure()
        co2_1.add_trace(go.Scatter(x = co2_1_8.index, y = co2_1_8.values,mode='lines+markers', name='1.64N-90N'))
        co2_1.add_trace(go.Scatter(x = co2_2_8.index, y = co2_2_8.values,mode='lines+markers', name='2.44N-64N'))
        co2_1.add_trace(go.Scatter(x = co2_3_8.index, y = co2_3_8.values,mode='lines+markers', name='3.24N-44N'))
        co2_1.add_trace(go.Scatter(x = co2_4_8.index, y = co2_4_8.values,mode='lines+markers', name='4.EQU-24N'))
        co2_1.add_trace(go.Scatter(x = co2_5_8.index, y = co2_5_8.values,mode='lines+markers', name='5.24S-EQU'))
        co2_1.add_trace(go.Scatter(x = co2_6_8.index, y = co2_6_8.values,mode='lines+markers', name='6.44S-24S'))
        co2_1.add_trace(go.Scatter(x = co2_8_8.index, y = co2_8_8.values,mode='lines+markers', name='8.90S-64S'))
        st.plotly_chart(co2_1)

    with tab2 :
        ghg_1 = go.Figure()
        ghg_1.add_trace(go.Scatter(x = ghg_1_8.index, y = ghg_1_8.values,mode='lines+markers', name='1.64N-90N'))
        ghg_1.add_trace(go.Scatter(x = ghg_2_8.index, y = ghg_2_8.values,mode='lines+markers', name='2.44N-64N'))
        ghg_1.add_trace(go.Scatter(x = ghg_3_8.index, y = ghg_3_8.values,mode='lines+markers', name='3.24N-44N'))
        ghg_1.add_trace(go.Scatter(x = ghg_4_8.index, y = ghg_4_8.values,mode='lines+markers', name='4.EQU-24N'))
        ghg_1.add_trace(go.Scatter(x = ghg_5_8.index, y = ghg_5_8.values,mode='lines+markers', name='5.24S-EQU'))
        ghg_1.add_trace(go.Scatter(x = ghg_6_8.index, y = ghg_6_8.values,mode='lines+markers', name='6.44S-24S'))
        ghg_1.add_trace(go.Scatter(x = ghg_8_8.index, y = ghg_8_8.values,mode='lines+markers', name='8.90S-64S'))
        st.plotly_chart(ghg_1)

    with tab3 :
        pop_1 = go.Figure()
        pop_1.add_trace(go.Scatter(x = pop_1_8.index, y = pop_1_8.values,mode='lines+markers', name='1.64N-90N'))
        pop_1.add_trace(go.Scatter(x = pop_2_8.index, y = pop_2_8.values,mode='lines+markers', name='2.44N-64N'))
        pop_1.add_trace(go.Scatter(x = pop_3_8.index, y = pop_3_8.values,mode='lines+markers', name='3.24N-44N'))
        pop_1.add_trace(go.Scatter(x = pop_4_8.index, y = pop_4_8.values,mode='lines+markers', name='4.EQU-24N'))
        pop_1.add_trace(go.Scatter(x = pop_5_8.index, y = pop_5_8.values,mode='lines+markers', name='5.24S-EQU'))
        pop_1.add_trace(go.Scatter(x = pop_6_8.index, y = pop_6_8.values,mode='lines+markers', name='6.44S-24S'))
        pop_1.add_trace(go.Scatter(x = pop_8_8.index, y = pop_8_8.values,mode='lines+markers', name='8.90S-64S'))
        st.plotly_chart(pop_1)

    with tab4 :
        gdp_1 = go.Figure()
        gdp_1.add_trace(go.Scatter(x = gdp_1_8.index, y = gdp_1_8.values,mode='lines+markers', name='1.64N-90N'))
        gdp_1.add_trace(go.Scatter(x = gdp_2_8.index, y = gdp_2_8.values,mode='lines+markers', name='2.44N-64N'))
        gdp_1.add_trace(go.Scatter(x = gdp_3_8.index, y = gdp_3_8.values,mode='lines+markers', name='3.24N-44N'))
        gdp_1.add_trace(go.Scatter(x = gdp_4_8.index, y = gdp_4_8.values,mode='lines+markers', name='4.EQU-24N'))
        gdp_1.add_trace(go.Scatter(x = gdp_5_8.index, y = gdp_5_8.values,mode='lines+markers', name='5.24S-EQU'))
        gdp_1.add_trace(go.Scatter(x = gdp_6_8.index, y = gdp_6_8.values,mode='lines+markers', name='6.44S-24S'))
        gdp_1.add_trace(go.Scatter(x = gdp_8_8.index, y = gdp_8_8.values,mode='lines+markers', name='8.90S-64S'))
        st.plotly_chart(gdp_1)

    st.session_state.df_gdp_co2_ghg = df_gdp_co2_ghg

if radio == "Evolution tempÃ©ratures de 1880 Ã  2023":

    st.write("Nous allons Ã  prÃ©sent rÃ©aliser les visuels pour comprendre les Ã©volutions de tempÃ©rature de 1880 Ã  2020 grÃ¢ce au dataset l-oti_ZonAnn")
    with st.expander("Voir dataframe l-oti ZonAnn"):
        st.dataframe(loti_ZonAnn)

    st.markdown("## Evolution globale et par hÃ©misphÃ¨re :")
    # Pour avoir une meilleure idÃ©e de l'Ã©volution des tempÃ©ratures, on demande un tracÃ© de la tendance sur la pÃ©riode couverte au niveau globale et par hÃ©misphÃ¨re
    fig_px = px.scatter(loti_ZonAnn, x="Year", y=["Glob","NHem",'SHem'], trendline="ols", labels = ["1. Global","2. HN","3. HS"])
    st.plotly_chart(fig_px)
    st.markdown("**Constat :** Au terme de de cette premiÃ¨re projection, on peut constater que l'hÃ©misphÃ¨re nord contribue le plus Ã  l'augmentation globale des tempÃ©ratures. On peut voir que la pÃ©riode 1930 voit un inversement de position entre l'hÃ©misphÃ¨re nord et l'hÃ©misphÃ¨re sud en terme d'augmentation.")

    st.markdown("## Evolution par latitude sur 3 strates :")
    # Dans l'optique d'avoir une vision encore plus fine de l'Ã©volution des tempÃ©ratures par zone gÃ©ographique, on fait dÃ©coupage par trois par latitude
    # Nous ajoutons une courbe des tendances sur chaque variable pour avoir une meilleure apprÃ©ciation de l'Ã©volution
    fig_pxx = px.scatter(loti_ZonAnn, x="Year", y=["24N-90N","24S-24N",'90S-24S'], trendline="ols")
    st.plotly_chart(fig_pxx)
    st.markdown("**Constat:** On peut constater une fois encore que les tempÃ©ratures augmentent sur toutes les zones. Cependant, la strate la plus au nord connait l'augmentation des tempÃ©ratures la plus importante. La seconde strate au niveau de l'Ã©quateur est la 2Ã¨me plus importante, mais reste proche de la tendance de la strate la plus au sud.")

    st.markdown("## Evolution par latitude sur 8 strates :")
    # Avec la volontÃ© d'avoir un dÃ©coupage toujours plus fin, nous regardons l'Ã©volution des tempÃ©ratures selon un dÃ©coupage par latitude sur 8 zones
    # Nous ajoutons une courbe des tendances sur chaque variable pour avoir une meilleure apprÃ©ciation de l'Ã©volution
    fig_pxxx = px.scatter(loti_ZonAnn, x="Year", y=["64N-90N","44N-64N",'24N-44N','EQU-24N','24S-EQU','44S-24S','64S-44S','90S-64S'],
                    trendline="ols")
    st.plotly_chart(fig_pxxx)
    st.markdown("**Constat :** Toutes les courbes sont en augmentation mais avec une intensitÃ© diffÃ©rente. Les deux zones les plus au nord connaissant les Ã©volutions de tempÃ©rature les plus importantes.")

if radio == "CorrÃ©lation entre variables":

    df_gdp_co2_ghg = st.session_state.df_gdp_co2_ghg

    st.markdown("## Ã‰tude de corrÃ©lations entre les diffÃ©rentes variables")

    option = st.selectbox("Quelles variables souhaitez-vous comparer ?",
                ("Co2 et GDP", "TempÃ©rature et Co2"))

    if option == "Co2 et GDP":

        st.markdown("### Visualisation des variables")

        # CrÃ©ation du graphique co2 / gdp
        co2_by_year = df_gdp_co2_ghg.groupby("year")["co2"].sum() #Evolution du co2 par annÃ©es
        gdp_by_year = df_gdp_co2_ghg.groupby("year")["gdp"].sum() #Evolution du gdp par annÃ©es
        values_by_year = df_gdp_co2_ghg.groupby("year").agg({'country': 'count',
                                        'gdp': lambda x: ((x.notnull()) & (x != 0)).sum(),
                                        'co2': lambda x: ((x.notnull()) & (x != 0)).sum()}) #compter pour chacune des variables le nombre de valeurs renseignÃ©es


        fig = make_subplots(rows=1, cols=2, subplot_titles=('CO2 Emissions', 'GDP'))

        fig.add_trace(go.Scatter(x = co2_by_year.index, y = co2_by_year.values,mode='lines+markers', name='Evol Co2' ),row=1, col=1)
        fig.add_trace(go.Scatter(x = gdp_by_year.index, y = gdp_by_year.values, mode = "lines+markers", name = "Evol Gdp" ),row=1, col=2)

        fig.update_layout(title='CO2 and GDP Over Years',
                xaxis_title='Year',
                yaxis_title='Value')
        # Show the plot
        #fig.update_layout( width = 1200, height=400)
        st.plotly_chart(fig, use_container_width=True)

        commentaire = '''Ces deux graphiques montrent que les tendances Ã  l'Ã©chelle mondiale semblent Ãªtre similaires.
        En d'autres termes il semblerait que l'augmentation d'une des deux variables entraÃ®ne l'augmentation de l'autre variable.
        Bien que les rÃ©sultats des graphiques soient dÃ©jÃ  assez convaincants, \
        nous allons procÃ©der Ã  un test statistique pour vÃ©rifier l'hypothÃ¨se de corrÃ©lation entre ceux deux variables'''
        st.markdown(commentaire)

        st.markdown("### VÃ©rification par un test statistique")

        commentaire = ''' Ces deux variables Ã©tant quantitatives nous allons procÃ©der Ã  un test de Pearson avec les hypothÃ¨ses suivantes :
        h0 : Les variables Co2 et GDP ne sont pas corrÃ©lÃ©es
        h1 : Les variables sont corrÃ©lÃ©es '''

        st.markdown(commentaire)

        #On crÃ©e le dataframe avec les valeurs de co2 et gdp par annÃ©es
        data_by_year = df_gdp_co2_ghg.groupby("year").agg({"co2" : "sum", "gdp" : "sum"})

        test_co2_gdp = pearsonr(data_by_year["gdp"],data_by_year["co2"])

        col1, col2 = st.columns(2)

        col1.metric("P-Valeur", test_co2_gdp[1] )
        col2.metric("Coefficient de Pearson", round(test_co2_gdp[0],2) )

        commentaire = ''' La P_valeur est trÃ¨s petite, ce qui signifie que nous pouvons rejeter l'hypothÃ¨e H0 et ainsi admettre une corrÃ©lation entre les deux variables.
        De plus, le coefficent de corrÃ©lation de Pearson proche de 1 nous indique qu'il y a une forte relation positive entre les deux variables '''

        st.markdown(commentaire)

    if option == "TempÃ©rature et Co2":

        st.markdown("### Visualisation des variables")

        co2_by_year = df_gdp_co2_ghg.groupby("year")["co2"].sum()
        df_temp_glob = loti_ZonAnn[["Year","Glob"]]

        fig = make_subplots(rows = 1, cols = 2, subplot_titles=('CO2 Emissions', 'Temperatures'))

        fig.add_trace(go.Scatter(x = co2_by_year.index, y = co2_by_year.values, mode = "lines+markers", name = "Evol Co2"), row = 1, col = 1)

        # Adding the Temperatures scatter plot with trendline
        fig.add_trace(go.Scatter(x=df_temp_glob["Year"], y=df_temp_glob["Glob"], mode="lines+markers", name="Evol Temp"), row=1, col=2)
        fig.add_trace(px.scatter(df_temp_glob, x="Year", y="Glob", trendline="ols").data[1], row=1, col=2)
        #.data[1] permet d'accÃ©der uniquement Ã  la courbe de tendance
        #px.scatter se compose donc des points --> .data[0] et de la droite .data[1]

        fig.update_layout(title='CO2 and Temp Over Years',
                xaxis_title='Year',
                yaxis_title='Value')

        st.plotly_chart(fig, use_container_width=True)

        commentaire = ''' Ces deux graphiques montrent d'un cÃ´tÃ© l'Ã©volution des Ã©missions de Co2 et de l'autre, l'Ã©volution des tempÃ©ratures.
        On remarque que les tendances observÃ©es sur la pÃ©riode sont trÃ¨s proches. On peut donc supposer qu'il existe un lien entre ces deux variables
        C'est ce que nous allons vÃ©rifier avec un test statistique'''

        st.markdown(commentaire)

        st.markdown("### VÃ©rification par un test statistique")

        commentaire = ''' Ces deux variables Ã©tant quantitatives nous allons procÃ©der Ã  un test de Pearson avec les hypothÃ¨ses suivantes :
        h0 : Les variables Co2 et GDP ne sont pas corrÃ©lÃ©es
        h1 : Les variables sont corrÃ©lÃ©es '''

        st.markdown(commentaire)

        #On crÃ©e le dataframe avec les valeurs de co2 et temp par annÃ©es
        co2_temp_by_year = df_temp_glob.merge(right = co2_by_year, left_on = "Year", right_on = co2_by_year.index)

        test_co2_temp = pearsonr(co2_temp_by_year["Glob"],co2_temp_by_year["co2"])

        col1, col2 = st.columns(2)

        col1.metric("P-Valeur", test_co2_temp[1] )
        col2.metric("Coefficient de Pearson", round(test_co2_temp[0],2) )

        commentaire = ''' La P_valeur est trÃ¨s petite, ce qui signifie que nous pouvons rejeter l'hypothÃ¨e H0 et ainsi admettre une corrÃ©lation entre les deux variables.
        De plus, le coefficent de corrÃ©lation de Pearson proche de 1 nous indique qu'il y a une forte relation positive entre les deux variables '''

        st.markdown(commentaire)

if radio == "Conclusion":

        st.markdown('## Nous avons pu faire plusieurs constats au cours de cette partie :')
        st.markdown("### Evolution des tempÃ©ratures :")
        st.markdown("- Oui les tempÃ©ratures augmentent sur l'ensemble du globe, mais pas avec la mÃªme intensitÃ© selon les zones et les pÃ©riodes")
        st.markdown("- Certaines zones de l'hÃ©misphÃ¨re nord ont connu une accÃ©lÃ©ration Ã  partir de 1930, les faisant mÃªme passer au-dessus d'autres zoness")

        st.markdown("### Evolution de l'activitÃ© humaine :")
        st.markdown("- Comme pour les tempÃ©ratures, l'activitÃ© humaine n'Ã©volue pas avec la mÃªme intensitÃ© selon les zones et les pÃ©riodes")
        st.markdown("- Cette diffÃ©rence pour les zones peut d'une part s'expliquer via le nombre de pays")
        st.markdown("- D'autre part, selon la zone observÃ©e, on aura des pays avec un impact fort dÃ» Ã  leur activitÃ©")
        st.write("Compte tenu du niveau de disponibilitÃ© des donnÃ©es trÃ¨s disparates, nous prenons ces observations comme des tendances Ã  observer plutÃ´t qu'une vÃ©ritÃ© immuable.")
        st.write("Mais nous pouvons au terme avoir une comprÃ©hension sur l'Ã©volution des variables sur un espace temps comme dans l'animation ci-dessous :")

        st.image("/content/drive/MyDrive/Colab_Notebooks/NOV23-CDA-TEMP_TERRESTRE/Flavien/Essais Streamlit/Streamlit/Evolution des tempÃ©ratures globales par annÃ©es.gif")
